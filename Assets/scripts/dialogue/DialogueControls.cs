//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/scripts/dialogue/DialogueControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DialogueControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DialogueControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DialogueControls"",
    ""maps"": [
        {
            ""name"": ""controls"",
            ""id"": ""85f19349-7940-46c1-b574-04c90808b28f"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""d5c155c4-60f8-4bbc-a98c-00d7b5824d69"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""submit"",
                    ""type"": ""Button"",
                    ""id"": ""0d1d1a46-035d-47af-b570-e0ae906d9f8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""97322cda-99a0-44ad-b2db-09c029229556"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""befcc396-520b-4ef2-a4b8-38993e8f88eb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cad8bd9c-d6fc-410a-a76d-3ca54b66a710"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""158cc76c-c637-49a8-bb0e-bce390ac75b1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // controls
        m_controls = asset.FindActionMap("controls", throwIfNotFound: true);
        m_controls_move = m_controls.FindAction("move", throwIfNotFound: true);
        m_controls_submit = m_controls.FindAction("submit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // controls
    private readonly InputActionMap m_controls;
    private IControlsActions m_ControlsActionsCallbackInterface;
    private readonly InputAction m_controls_move;
    private readonly InputAction m_controls_submit;
    public struct ControlsActions
    {
        private @DialogueControls m_Wrapper;
        public ControlsActions(@DialogueControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_controls_move;
        public InputAction @submit => m_Wrapper.m_controls_submit;
        public InputActionMap Get() { return m_Wrapper.m_controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void SetCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterface != null)
            {
                @move.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMove;
                @move.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMove;
                @move.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnMove;
                @submit.started -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSubmit;
                @submit.performed -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSubmit;
                @submit.canceled -= m_Wrapper.m_ControlsActionsCallbackInterface.OnSubmit;
            }
            m_Wrapper.m_ControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @move.started += instance.OnMove;
                @move.performed += instance.OnMove;
                @move.canceled += instance.OnMove;
                @submit.started += instance.OnSubmit;
                @submit.performed += instance.OnSubmit;
                @submit.canceled += instance.OnSubmit;
            }
        }
    }
    public ControlsActions @controls => new ControlsActions(this);
    public interface IControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
    }
}
